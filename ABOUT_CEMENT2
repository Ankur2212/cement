In cement2, everything is broken out into handlers... such as:
    
    log_handler
    option_handler
    config_handler
    output_handler
    command_handler
    extension_handler
    plugin_handler
    etc


A handler is an implementation of a 'handler interface'... for example 
IConfigHandler is an interface that defines what a config handler must 
implement.  The, ConfigParserConfigHandler is the default which implements the 
interface using the standard ConfigParser library.  I can then write a 
framework extension for ConfigObj (which I prefer, but has an external dep on 
configobj)... where ConfigObjConfigHandler implements the same interface, and 
to the framework does exactly the same thing though in my app I can access the 
extra ConfigObj features like calling my config objects as a dict, and so on.

I have not yet written the interfaces or the handlers for option parsing, and 
command dispatch... but those are the last two things before you can really 
start using and testing cement2 beta.  I'll be writing two extension for 
option parsing... one for ArgParseOptionHandler and the other for 
OptParseOptionHandler.  That said, if you're anxious to see it (no docs, or 
anything) its available in the 'portland' branch:

https://github.com/derks/cement/tree/portland/src/


cement2 is the core library, and cement2.ext.XXXXXX are framework extensions 
that implement different handlers... configobj is the primary extension that 
I would reference as it is complete and the others not so much.  Additionally, 
there is a test.py in there that might help:

https://github.com/derks/cement/blob/portland/src/cement2/test.py


Some things I need to do still:

    Write option and command dispatch interfaces and handlers
    Figure out application 'plugin' support
    Write the documentation
    Write cement2.devtools which pastes a functional, working app from template.
    Ensure Python 3 compatibility


One of my goals for cement2 was that you could do everything from one file 
(a script) the same as you can from a full blown MVC app (like cement 0.8 
does now).  I haven't gotten to that yet... just testing things out of one 
file so far and focussing on nosetest coverage.

