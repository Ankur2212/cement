"""
This is the application's initialization code.  Unless you know the 
"ins-and-outs" of The Cement CLI Application Framework, you probably should 
not modify the main() function of this file.

"""

import sys
from pkg_resources import get_distribution

from cement import get_logger, app_setup
from cement.core import exc as cement_exc

from {{package}}.core import config, exc

VERSION = get_distribution('{{project}}').version
BANNER = """
{{project}} version %s
""" % VERSION

def main(args=None):
    try:
        if not args:
            args = sys.argv
            
        app_setup.lay_cement(config=config.default_config, args=args, 
                             banner=BANNER, version=VERSION)
        log = get_logger(__name__)
        log.debug("Cement Framework Initialized!")
        app_setup.process_args(args)
            
    except cement_exc.CementArgumentError, e:
        # Display the apps exception names instead for the Cement exceptions.
        print("{{package.capitalize()}}ArgumentError > %s" % e)
        sys.exit(e.code)
    except cement_exc.CementConfigError, e:
        print("{{package.capitalize()}}ConfigError > %s" % e)
        sys.exit(e.code)
    except cement_exc.CementRuntimeError, e:
        print("{{package.capitalize()}}RuntimeError > %s" % e)
        sys.exit(e.code)
    except exc.{{package.capitalize()}}ArgumentError, e:
        print("{{package.capitalize()}}ArgumentError > %s" % e)
        sys.exit(e.code)
    except exc.{{package.capitalize()}}ConfigError, e:
        print("{{package.capitalize()}}ConfigError > %s" % e)
        sys.exit(e.code)
    except exc.{{package.capitalize()}}RuntimeError, e:
        print("{{package.capitalize()}}RuntimeError > %s" % e)
        sys.exit(e.code)
    sys.exit(0)
   
def nose_main(args, test_config):
    """
    This function provides an alternative to main() that is more friendly for 
    nose tests as it doesn't catch any exceptions.
    
    Required Arguments:
        
        args
            The args to pass to lay_cement
        
        test_config
            A test config to pass to lay_cement
    
    Usage:
    
    .. code-block:: python
    
        from {{package}}.core.appmain import nose_main
        from {{package}}.core.config import get_nose_config
        
        args = [__file__, 'nosetests', '--quiet']
        (res_dict, output_text) = nose_main(args, get_nose_config())
        
    """
    
    app_setup.lay_cement(config=test_config, banner=BANNER, args=args)
    log = get_logger(__name__)
    log.debug("Cement Framework Initialized!")

    (res, output_txt) = app_setup.process_args(args)
    return (res, output_txt)
         
if __name__ == '__main__':
    main()
    
