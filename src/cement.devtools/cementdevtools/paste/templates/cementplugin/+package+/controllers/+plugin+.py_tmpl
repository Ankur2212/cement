"""{{plugin}} controller class to expose commands for {{project}}."""

from cement.core.controller import CementController, expose

from {{package}}.model.{{plugin}} import {{plugin.capitalize()}}Model

# NOTE: As of Cement 0.8.17, new applications are created with a 
# base controller in <yourapp>/core/controller.py.  For compatibility, we
# haven't done that here by default... but if you want to you can
# use {{package.capitalize()}}Controller instead of CementController 
# if the app was built on Cement >=0.8.17.
#
# from {{package}}.core.controller import {{package.capitalize()}}Controller
# class {{plugin.capitalize()}}Controller({{package.capitalize()}}Controller):
#

class {{plugin.capitalize()}}Controller(CementController):
    @expose()              
    def {{plugin}}_command(self):
        """Register root command that doesn't use a template."""
        foo = 'bar'
        
        # Even if you're not using a template, return relevant data so that
        # you can still use the --json engine, or similar.
        return dict(foo=foo)
          
    @expose()            
    def {{plugin}}_command_help(self):
        """help methods are accessed as 'command-help'."""
        print "{{plugin}} root command help method."

    @expose('{{project}}.templates.{{plugin}}.{{plugin}}_command')              
    def {{plugin}}_command2(self, *args, **kw):
        """Register root command, with Genshi templating."""
        foo = "Hello"
        bar = "World"
        return dict(foo=foo, bar=bar)

    @expose(namespace='{{plugin}}')              
    def {{plugin}}_sub_command(self):
        """Register sub command for the {{plugin}} namespace."""
        foo = 'bar'
        print foo
        return dict(foo=foo)

